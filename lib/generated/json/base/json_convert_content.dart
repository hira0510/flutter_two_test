// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter_two_test/database/entity/attractions_model.dart';
import 'package:flutter_two_test/generated/json/attractions_model.g.dart';
import 'package:flutter_two_test/entity/json_bean_factory_test_entity.dart';
import 'package:flutter_two_test/generated/json/json_bean_factory_test_entity.g.dart';

JsonConvert jsonConvert = JsonConvert();

class JsonConvert {

  T? convert<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    return asT<T>(value);
  }

  List<T?>? convertList<T>(List<dynamic>? value) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => asT<T>(e)).toList();
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => asT<T>(e)!).toList();
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }
  T? asT<T extends Object?>(dynamic value) {
    if (value is T) {
      return value;
    }
		final String type = T.toString();
    try {
      final String valueS = value.toString();
      if (type == "String") {
        return valueS as T;
      } else if (type == "int") {
        final int? intValue = int.tryParse(valueS);
        if (intValue == null) {
          return double.tryParse(valueS)?.toInt() as T?;
        } else {
          return intValue as T;
        }      } else if (type == "double") {
        return double.parse(valueS) as T;
      } else if (type ==  "DateTime") {
        return DateTime.parse(valueS) as T;
      } else if (type ==  "bool") {
        if (valueS == '0' || valueS == '1') {
          return (valueS == '1') as T;
        }
        return (valueS == 'true') as T;
      } else {
        return JsonConvert.fromJsonAsT<T>(value);
      }
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return null;
    }
  } 
	//Go back to a single instance by type
	static M? _fromJsonSingle<M>(Map<String, dynamic> json) {
		final String type = M.toString();
		if(type == (AttractionsModel).toString()){
			return AttractionsModel.fromJson(json) as M;
		}
		if(type == (AttractionsHead).toString()){
			return AttractionsHead.fromJson(json) as M;
		}
		if(type == (AttractionsInfoArray).toString()){
			return AttractionsInfoArray.fromJson(json) as M;
		}
		if(type == (AttractionsInfo).toString()){
			return AttractionsInfo.fromJson(json) as M;
		}
		if(type == (JsonBeanFactoryTestEntity).toString()){
			return JsonBeanFactoryTestEntity.fromJson(json) as M;
		}
		if(type == (JsonBeanFactoryTestXmlHead).toString()){
			return JsonBeanFactoryTestXmlHead.fromJson(json) as M;
		}
		if(type == (JsonBeanFactoryTestXmlHeadInfos).toString()){
			return JsonBeanFactoryTestXmlHeadInfos.fromJson(json) as M;
		}
		if(type == (JsonBeanFactoryTestXmlHeadInfosInfo).toString()){
			return JsonBeanFactoryTestXmlHeadInfosInfo.fromJson(json) as M;
		}

		print("$type not found");
	
		return null;
}

  //list is returned by type
	static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
		if(<AttractionsModel>[] is M){
			return data.map<AttractionsModel>((Map<String, dynamic> e) => AttractionsModel.fromJson(e)).toList() as M;
		}
		if(<AttractionsHead>[] is M){
			return data.map<AttractionsHead>((Map<String, dynamic> e) => AttractionsHead.fromJson(e)).toList() as M;
		}
		if(<AttractionsInfoArray>[] is M){
			return data.map<AttractionsInfoArray>((Map<String, dynamic> e) => AttractionsInfoArray.fromJson(e)).toList() as M;
		}
		if(<AttractionsInfo>[] is M){
			return data.map<AttractionsInfo>((Map<String, dynamic> e) => AttractionsInfo.fromJson(e)).toList() as M;
		}
		if(<JsonBeanFactoryTestEntity>[] is M){
			return data.map<JsonBeanFactoryTestEntity>((Map<String, dynamic> e) => JsonBeanFactoryTestEntity.fromJson(e)).toList() as M;
		}
		if(<JsonBeanFactoryTestXmlHead>[] is M){
			return data.map<JsonBeanFactoryTestXmlHead>((Map<String, dynamic> e) => JsonBeanFactoryTestXmlHead.fromJson(e)).toList() as M;
		}
		if(<JsonBeanFactoryTestXmlHeadInfos>[] is M){
			return data.map<JsonBeanFactoryTestXmlHeadInfos>((Map<String, dynamic> e) => JsonBeanFactoryTestXmlHeadInfos.fromJson(e)).toList() as M;
		}
		if(<JsonBeanFactoryTestXmlHeadInfosInfo>[] is M){
			return data.map<JsonBeanFactoryTestXmlHeadInfosInfo>((Map<String, dynamic> e) => JsonBeanFactoryTestXmlHeadInfosInfo.fromJson(e)).toList() as M;
		}

		print("${M.toString()} not found");
	
		return null;
}

  static M? fromJsonAsT<M>(dynamic json) {
		if(json == null){
			return null;
		}		if (json is List) {
			return _getListChildType<M>(json.map((e) => e as Map<String, dynamic>).toList());
		} else {
			return _fromJsonSingle<M>(json as Map<String, dynamic>);
		}
	}
}